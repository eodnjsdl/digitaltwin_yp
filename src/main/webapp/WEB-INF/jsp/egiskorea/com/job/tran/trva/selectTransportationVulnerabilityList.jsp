<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="ui" uri="http://egovframework.gov/ctl/ui"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<style type="text/css">
	/* 취약분석 격자 구분표 */
	.trvaInfoLegend {
		margin-top: 15px;
		margin-bottom: 15px;
	    width: 100%;
	}
	
	.trvaInfoLegend h4 {
	    margin-bottom: 5px;
	}
	
	.trvaInfoLegend ol {
	    background-color: #E5E7EA;
	    padding: 10px 0;
	    border-radius: 5px;
	}
	
	.trvaInfoLegend ol li {
	    display: flex;
	    flex-direction: row;
	    position: relative;
	}
	
	.trvaInfoLegend ol li:not(:last-child) {
	    margin-bottom: 2px;
	}
	
	.trvaInfoLegend ol li span.rg {
	    display: block;
	    width: 20px;
	    height: 20px;
	    margin: 0 5% 0 2%;
	    border: 1px solid #eaeaea;
	}
	
	.trvaInfoLegend ol li span.rg.lv01 {
	    background-color: #ffffff;
	}
	
	.trvaInfoLegend ol li span.rg.lv02 {
	    background-color: #ff9090;
	}
	
	.trvaInfoLegend ol li span.rg.lv03 {
	    background-color: #ff7070;
	}
	
	.trvaInfoLegend ol li span.rg.lv04 {
	    background-color: #ff5050;
	}
	
	.trvaInfoLegend ol li span.rg.lv05 {
	    background-color: #ff3030;
	}
	
	.trvaInfoLegend ol li label {
	    width: 80%;
	    display: flex;
	    justify-content: flex-start;
	}
	
	.trvaInfoLegend ol li label input {
	    width: 45%;
	    font-size: 13px;
	    font-weight: 300;
	    color: #44516A;
	    background-color: #f8f8f8;
	    line-height: 20px;
	    padding: 0 5%;
	    border-radius: 5px;
	    border: 1px solid rgba(68, 81, 106, 0.3);
	}
	
	.trvaInfoLegend ol li label input:first-of-type {
	    margin-right: 10px;
	}
	
	.trvaInfoLegend ol li label input:not(:first-of-type) {
	    margin-left: 10px;
	}
	
	.trvaInfoLegend ol li span.rg.lv05 {
	    background-color: #ff3030;
	}
	/* 취약분석 격자 구분표 */

</style>

<script type="text/javascript">
	//전역 변수
	var TRANSVUNLER={
		EMDGEOMARRAY :	[],			//읍면동 공간정보 목록
		BUSROUTEIDARRAY : [],		//버스노선 목록
		BUSSTTNIDARRAY : []			//버스정류소 목록
	}

	//jquery
	$(document).ready(function(){
		//console.log("selectTransportationVulnerabilityList.jsp");
		console.log("교통분석 - 대중교통 취약 분석");
		
		//검색 조건 세팅
		getCmmCodeData("YPE001", "#trvaSearchForm select[name=searchArea]");	//읍면동
		//getCmmCodeData("YPEMD", "#trvaSearchForm select[name=searchArea]");	//읍면동
		getTransVulnerBaseYMList();
		setTrvaEmdGeomData();
		
		$("#tranCloseBtn").on('click', function () {
			dtmap.layer.clear();
		});
		
		
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_route]").change(function() {
			//console.log("checkbox - trva_bus_route");
			//console.log($(this).is(':checked'));
			
			if($(this).is(':checked')){
				var emdCd = $("#trvaSearchForm select[name=searchArea]").val();
				emdCd = emdCd.slice(0,8);
				onMapBusRoteInfo(emdCd);
			}else{
				offMapBusRoteInfo();
			}
		});
		
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_sttn]").change(function() {
			//console.log("checkbox - trva_bus_sttn");
			//console.log($(this).is(':checked'));
			
			if($(this).is(':checked')){
				var emdCd = $("#trvaSearchForm select[name=searchArea]").val();
				emdCd = emdCd.slice(0,8);
				onMapBusSttnInfo(emdCd);
			}else{
				offMapBusSttnInfo();
			}
		});
		
		initTransVulner();
		
	});
	
	//functions
	
	/**
     * 대중교통 취약분석 초기화
     */
	function initTransVulner(){
		
		selectTransVulnerList();
	}
	
	
	/**
     * 기준 연월
     */
	function getTransVulnerBaseYMList(){
		console.log("getTransVulnerBaseYMList()");
		
		$.ajax({
			type : "POST",
			url : "/job/tran/trva/getTransVulnerBaseYMList.do",
			//data : formData,
			dataType : "json",
			processData : false,
			contentType : false,
			async: false,
			success : function(returnData, status){
				if(status == "success") {
					//console.log(returnData);
					
					var baseYmList = returnData.baseYmList;
					
					if(baseYmList){
						for(var i=0; i<baseYmList.length; i++){
							var stdrYm = baseYmList[i].stdrYm;
							
							var dYear 	= stdrYm.slice(0,4)+"년";
							var dMonth 	= stdrYm.slice(-2) +"월";

							var dhml = "<option value='"+stdrYm+"'>"+ dYear+" "+dMonth +"</option>";
							$("#trvaSearchForm select[name=stdrYm]").append(dhml);
							
						}
						
					}else{
						console.log("기준연월 데이터 조회 오류");
						return false;
					}
					
				}else{
					toastr.error("관리자에게 문의 바랍니다.", "정보를 불러오지 못했습니다.");
					return;
				}
			}, complete : function(){
				ui.loadingBar("hide");
			}
		});
		
		
		/*
		var today = new Date();
		
		for(var i=0; i<12; i++){
			
			var dYear = today.getFullYear();
			var dMonth = ('0' + (today.getMonth() + 1)).slice(-2);
			
			var dVal = dYear+""+dMonth;
			var dYM  = dYear+"년 "+dMonth+"월";

			var dhml = "<option value='"+dVal+"'>"+ dYM +"</option>";
			$("#trvaSearchForm select[name=stdrYm]").append(dhml);
			//console.log('dYM>>'+dYM);
			
			var dMonth = today.setMonth(today.getMonth()-1);
			var dDate = new Date(dMonth);
			today = dDate;
		}
		*/
	}
	
	/**
	* 대중교통 취약 분석 조회
	*/
	function selectTransVulnerList(){
		console.log("selectTransVulnerList()");
			 
		ui.loadingBar("show");
		 
		var emdCd = $("#trvaSearchForm select[name=searchArea]").val();
		emdCd = emdCd.slice(0,8);
		
		var centerPos = getTrvaEmdGeomCenterPos(emdCd);
		//console.log("centerPos>>");		
		//console.log(centerPos);		
		if(centerPos){
			if(dtmap.mod == '2D'){
				//console.log("2D");
				
				//중심점 이동 및 zoom 설정
	            var options = {
	            		//zoom : 11	
	            		zoom : 13	
	            }
				
				dtmap.setCenter(
					[centerPos[0]-5000, centerPos[1]]
					, options
				);
				
			}else if(dtmap.mod == '3D'){
				//console.log("3D");
				
                const point = new ol.geom.Point([centerPos[0]-0.05,centerPos[1]]);
				
				var center = point.flatCoordinates;
				center.push(22000);	// 고도 추가(zoom 역할)
					
				dtmap.setCenter(center);
			}
		}else{
			if(dtmap.mod == '2D'){
				//console.log("2D");
				
				//중심점 이동 및 zoom 설정
	            var options = {
	            		zoom : 11	
	            		//zoom : 13	
	            }
				
				dtmap.setCenter(
					[994028.8151566336, 1943589.1357401803]
					, options
				);
				
			}else if(dtmap.mod == '3D'){
				//console.log("3D");
				
                const point = new ol.geom.Point([127.48846106, 37.49131546]);
				
				var center = point.flatCoordinates;
				center.push(22000);	// 고도 추가(zoom 역할)
					
				dtmap.setCenter(center);
			}
		}
		
		
		dtmap.vector.clear();
		
		if(dtmap.mod == '2D'){
			
			dtmap.layer.clear();	
			dtmap.showLayer({
	                id: 'layer_trva_grid_area',
	                type: 'WMS',
	                layerNm: 'digitaltwin:tgd_grid_popltn_info',
	                title: 'test',
	                visible: true,
	                shpType: 6,
	                cql : "li_cd like '"+emdCd+"%'",
	                //sldBody: findLayer.styleInfo
	        });
			
		}else if(dtmap.mod == '3D'){
			
			console.log("3d 격자 불러 오기");
			
			//dtmap.clear();
			
			var data = $("#trvaSearchForm").serialize();
			console.log(data);
			
			var formData = new FormData($("#trvaSearchForm")[0]);
			 
			ui.loadingBar("show");
			
			$.ajax({
				type : "POST",
				url : "/job/tran/trva/selectTransportationVulnerabilityList.do",
				data : formData,
				dataType : "json",
				processData : false,
				contentType : false,
				//contentType: "application/json; charset=utf-8",
				async: false,
				success : function(returnData, status){
					if(status == "success") {
						
						//console.log(returnData);
						//var liList = returnData.resultListAllLi;
						var gridList = returnData.resultListAllGrid;
						//console.log(gridList);
						/* var geomCenterPos = returnData.geomCenterPos;
						if(geomCenterPos){
							var geomcenter = geomCenterPos.geomcenter;
							//console.log(geomcenter);
							
							const formatWKT = new ol.format.WKT();
							let geometryCenter = formatWKT.readGeometry(geomcenter);
							//console.log(geometryCenter);
							
							//dtmap.getCenter();
							
							console.log("-----------------------------")
							console.log(geometryCenter.getCoordinates());
													
							if(gridList){	
								
								if(dtmap.mod == '2D'){
									console.log("2D");
									
									//중심점 이동 및 zoom 설정
						            var options = {
						            		zoom : 13	
						            }
									
									dtmap.setCenter(
										[geometryCenter.getCoordinates()[0]-5000, geometryCenter.getCoordinates()[1]]
										, options
									);
									
								}else if(dtmap.mod == '3D'){
									console.log("3D");
									
									geometryCenter.setCoordinates([geometryCenter.getCoordinates()[0]-5000, geometryCenter.getCoordinates()[1]])
									
									var tranPoint = geometryCenter.transform("EPSG:5179", "EPSG:4326");
									var center = tranPoint.flatCoordinates;
									center.push(20000);	// 고도 추가(zoom 역할)
										
									dtmap.setCenter(center);
								}
								
								
							}else{
								
								console.log(dtmap.mod);
								
								if(dtmap.mod == '2D'){
									console.log("2D");
									
									//중심점 이동 및 zoom 설정
						            var options = {
						            		//zoom : 11	
						            		zoom : 13	
						            }
									
									dtmap.setCenter(
										[geometryCenter.getCoordinates()[0]-19500, geometryCenter.getCoordinates()[1]]
										, options
									);
									
								}else if(dtmap.mod == '3D'){
									console.log("3D");
									
									geometryCenter.setCoordinates([geometryCenter.getCoordinates()[0]-19500, geometryCenter.getCoordinates()[1]])
									
									var tranPoint = geometryCenter.transform("EPSG:5179", "EPSG:4326");
									console.log(tranPoint);
									
									var center = tranPoint.flatCoordinates;
									center.push(70000);	// 고도 추가(zoom 역할)
									console.log(center);
										
									dtmap.setCenter(center);
								}
								
							} 
							
						} */
						
						//console.log(liList);
						//console.log(gridList);
						
						
						
						/* for(var i=0; i<liList.length; i++){
							var liCd = liList[i].liCd;
							var geom = liList[i].geom;
							
							var style1 = { 
								fill: {
				                	//color: 'rgba(46,161,255,0.68)'
				                	color: 'rgba(46,161,255,0.88)'
				                },
				                stroke: {
				                    //color: '#89dfff',
				                    //color: '#FF3333',
				                    color: '#FFFFFF',
				                    width: 1
				                },
							}
							
							const formatWKT = new ol.format.WKT();
							let geometry1 = formatWKT.readGeometry(geom);
							
							
							dtmap.vector.addPolygon({
								  id: liCd,
								  coordinates: geometry1.getCoordinates(),
								  //crs: 'EPSG:4326',
								  crs: 'EPSG:5179',
								  style: style1 //스타일 옵션 (벡터 스타일옵션 참고)
							}); 
							
						}  */
						
						if(gridList){
							for(var i=0; i<gridList.length; i++){ 
								var gridId = gridList[i].gridId;
								var geom = gridList[i].geom;
								
								var style2 = { 
									fill: {
					                	//color: 'rgba(46,161,255,0.68)'
					                	color: 'rgba(255,255,0,0.68)'
					                },
					                stroke: {
					                    //color: '#89dfff',
					                    //color: '#FF3333',
					                    color: '#FFFFFF',
					                    width: 1
					                },
								}
								
								const formatWKT = new ol.format.WKT();
								let geometry2 = formatWKT.readGeometry(geom);

								/* if(dtmap.mod == "2D"){
									console.log("2D--->");								
									console.log(geometry2.getCoordinates());								
									
									dtmap.vector.addPolygon({
										  id: gridId,
										  coordinates: geometry2.getCoordinates(),
										  //crs: 'EPSG:4326',
										  crs: 'EPSG:5179',
										  style: style2 //스타일 옵션 (벡터 스타일옵션 참고)
									}); 
									
								}else */ if(dtmap.mod == "3D"){
									//console.log("3D--->");								
									//console.log(geometry2.getCoordinates());
									
									dtmap.vector.addPolygon({
										  //id: gridId,
										  coordinates: geometry2.getCoordinates(),
										  crs: 'EPSG:5179',
										  style: style2 //스타일 옵션 (벡터 스타일옵션 참고)
									}); 
								}
							 } 
						}
						
						///////////////////
						
						/* var emdCd = $("#trvaSearchForm select[name=searchArea]").val();
						
						var dCql = ""; 
						if(emdCd){
							dCql = "emd_cd like '"+emdCd+"%'";
						}
						//console.log(dCql);
						dtmap.layer.clear();	
						//dtmap.layer.removeLayer('layer_trva_emd_area');
						
						dtmap.showLayer({
			                    id: 'layer_trva_emd_area',
			                    type: 'WMS',
			                    layerNm: 'digitaltwin:tgd_scco_emd',
			                    title: 'test',
			                    visible: true,
			                    shpType: 6,
			                    cql : "emd_cd like '"+emdCd+"%'",
			                    //sldBody: findLayer.styleInfo
			            }); */
			
					}else{
						toastr.error("관리자에게 문의 바랍니다.", "정보를 불러오지 못했습니다.");
						return;
					}
				}, complete : function(){
					ui.loadingBar("hide");
				}
			}); 
			
			
		}
		
		ui.loadingBar("hide");
		
		//버스 노선/정류장 체크박스 온
		
		//dtmap.vector.clear();
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_route]").prop("checked", true);		
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_route]").change();		
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_sttn]").prop("checked", true);		
		$(".trvaInfoLegend input[type=checkbox][name=trva_bus_sttn]").change(); 	
		
		/////////////////////////////////////////
		var result =
			[
				{areaNm : '양평읍', areaRelImp : 0.12 , pplRelImp : 0.02 , vulnerRank : 9 },
				{areaNm : '강상면', areaRelImp : 4.28 , pplRelImp : 0.14 , vulnerRank : 4 },
				{areaNm : '강하면', areaRelImp : 2.25 , pplRelImp : 0.08 , vulnerRank : 7 },
				{areaNm : '양서면', areaRelImp : 0.85 , pplRelImp : 0.09 , vulnerRank : 8 },
				{areaNm : '옥천면', areaRelImp : 6.38 , pplRelImp : 0.13 , vulnerRank : 3 },
				{areaNm : '서종면', areaRelImp : 2.80 , pplRelImp : 0.09 , vulnerRank : 6 },
				{areaNm : '단월면', areaRelImp : 8.04 , pplRelImp : 0.07 , vulnerRank : 2 },
				{areaNm : '청운면', areaRelImp : 9.40 , pplRelImp : 0.34 , vulnerRank : 1 },
				{areaNm : '양동면', areaRelImp : 3.35 , pplRelImp : 0.20 , vulnerRank : 5 },
				{areaNm : '지평면', areaRelImp : 2.35 , pplRelImp : 0.12 , vulnerRank : 10},
				{areaNm : '용문면', areaRelImp : 3.29 , pplRelImp : 0.32 , vulnerRank : 11},
				{areaNm : '개군면', areaRelImp : 1.39 , pplRelImp : 0.42 , vulnerRank : 12}
		];
		
				
		//리스트 갱신
		var trvaListHml = "";
		for(var i=0; i<result.length; i++){
						
			trvaListHml +=	"<tr>";
			trvaListHml +=	"<td>"+result[i].areaNm+"</td>";
			trvaListHml +=	"<td>"+result[i].areaRelImp+"</td>";
			trvaListHml +=	"<td>"+result[i].pplRelImp+"</td>";
			trvaListHml +=	"<td>"+result[i].vulnerRank+"</td>";
			trvaListHml +=	"</tr>";
			
    	}
		
		$("#trvaInfoList").html(trvaListHml);
		
	}
	
	//읍면동 공간정보 데이터 세팅
	function setTrvaEmdGeomData(){
		//console.log("setTrvaEmdGeomData()");	
		
		 const geomOptions = {
        		typeNames: 'tgd_scco_emd',
        		sortBy : 'gid',
        		sortOrder : 'DESC',
       	}
       	
       	// 전체(읍면동) geometry 값 가져오는 wfs 
       	const promiseGeo = dtmap.wfsGetFeature(geomOptions);
       	promiseGeo.then(function(data) {
       		//console.log(data);
       		var geoArry = dtmap.util.readGeoJson(data);
       		//console.log(geoArry);
   		
       		let geoEmdArray =  new Array();
   			 
   			for (let i = 0; i < geoArry.length; i++) {
   				
   				var info = new Object();
   				info.emdCd 		= geoArry[i].values_.emd_cd;
   				info.geometry 	= geoArry[i].values_.geometry;
   
   				let geometry = info.geometry;
   				let coordinate = null;

   		  		if (geometry instanceof ol.geom.Polygon) {
              		coordinate = ol.extent.getCenter(geometry.getExtent());
   		  		}else if(geometry instanceof ol.geom.MultiPolygon) {
   		            coordinate = ol.extent.getCenter(geometry.getPolygon(0).getExtent());
   		  		}
   		  		
   		  		if(coordinate){
   		  			info.centerPos = coordinate;
   		  		}
   				
   				geoEmdArray.push(info);
   			}
   	
   			TRANSVUNLER.EMDGEOMARRAY = geoEmdArray;
   			//console.log(TRANSVUNLER.EMDGEOMARRAY);
       	});	
		
	}
	
	//읍면동 공간정보 조회
	function getTrvaEmdGeomData(emdCd){
		//console.log("getTrvaEmdGeomData(emdCd)");
		//console.log(emdCd);
		
		if(emdCd){
			const geom =  TRANSVUNLER.EMDGEOMARRAY;
			
			for (let i = 0; i < geom.length; i++) {
		    	if (geom[i].emdCd == emdCd) {
		    		return geom[i].geometry;
		    	} 
		    }
		}else{
			//console.log("잘못된 코드 호출");
			return false; 
		}
		
	}
	
	
	//읍면동 공간정보 조회
	function getTrvaEmdGeomCenterPos(emdCd){
		//console.log("getTrvaEmdGeomCenterPos(emdCd)");
		//console.log(emdCd);
		
		if(emdCd){
			const geom =  TRANSVUNLER.EMDGEOMARRAY;
			
			for (let i = 0; i < geom.length; i++) {
		    	if (geom[i].emdCd == emdCd) {
		    		return geom[i].centerPos;
		    	} 
		    }
		}else{
			//console.log("잘못된 코드 호출");
			return false; 
		}
		
	}
	
	
	//////////////////
	
	//버스노선 조회(읍면동) 및 맵에 표시
	function onMapBusRoteInfo(emdCd){
		//console.log("onMapBusRoteInfo()");
		//console.log(emdCd);
		
		var options = {
			typeNames	: "tgd_bus_route_info" + "",
			sortBy		: 'route_id',
			sortOrder	: 'DESC',
			visible		: false
		};
		
		if(emdCd){
   			//emdCd += "0";
   			let geo = getTrvaEmdGeomData(emdCd);
   			if (geo != null) {
   				options.geometry = geo;
   			}
   		}
		
		const promise = dtmap.wfsGetFeature(options);
		promise.then(function(data) {

            TRANSVUNLER.BUSROUTEIDARRAY = [];
            var features = data.features;
            for(var i=0; i<features.length; i++){
            	TRANSVUNLER.BUSROUTEIDARRAY.push(features[i].id);
            }
            
            //지도에 그리기
            dtmap.vector.readGeoJson(data, function(feature) {
            	
  	          	// 스타일 콜백 
  	 			let properties = feature.getProperties();
  	 			let route_ty = properties['route_ty'];
  	 			let route_nm_color;
  	 			
  	 			// 색상 확인 필요
  	 			if (route_ty == 11) {				// 직행좌석형시내버스: bus_gg-03_ico
  	 				route_nm_color = '#e60012';
  	 			} else if (route_ty == 12) {		// 좌석형시내버스: bus_gg-02_ico
  	 				route_nm_color = '#0068b7';
  	 			} else if (route_ty == 13) {		// 일반형시내버스: bus_gg-01_ico
  	 				route_nm_color = '#33CC99';
  	 			} else if (route_ty == 14) {		// 광역급행형시내버스: bus_gg-01_ico -> 일반형시내버스(일반좌석버스)
  	 				route_nm_color = '#006896';
  	 			} else if (route_ty == 15) {		// 따복형시내버스: bus_gg-06_ico
  	 				route_nm_color = '#bb2266';
  	 			} else if (route_ty == 16) {		// 경기순환버스: bus_gg-03_ico
  	 				route_nm_color = '#e60012';
  	 			} else if (route_ty == 21) {		// 직행좌석형농어촌버스: bus_gg-01_ico
  	 				route_nm_color = '#33CC99';
  	 			} else if (route_ty == 22) {		// 좌석형농어촌버스: bus_gg-01_ico
  	 				route_nm_color = '#33CC99';
  	 			} else if (route_ty == 23) {		// 일반형농어촌버스: bus_gg-01_ico
  	 				route_nm_color = '#33CC99';
  	 			} else if (route_ty == 30) {		// 마을버스: bus_gg-08_ico
  	 				route_nm_color = '#ffc600';
  	 			} else if (route_ty == 41) {		// 고속형시외버스: bus_gg-06_ico -> 따복버스
  	 				route_nm_color = '#a800ff';
  	 			} else if (route_ty == 42) {		// 좌석형시외버스: bus_gg-06_ico -> 따복버스
  	 				route_nm_color = '#a800ff';
  	 			} else if (route_ty == 43) {		// 일반형시외버스: bus_gg-06_ico -> 따복버스
  	 				route_nm_color = '#a800ff';
  	 			} else if (route_ty == 51) {		// 리무진공항버스: bus_gg-05_ico -> 굿모닝글자버스
  	 				route_nm_color = '#00a0e9';
  	 			} else if (route_ty == 52) {		// 좌석형공항버스: bus_gg-05_ico -> 굿모닝글자버스
  	 				route_nm_color = '#00a0e9';
  	 			} else if (route_ty == 53) {		// 일반형공항버스: bus_gg-05_ico -> 굿모닝글자버스
  	 				route_nm_color = '#00a0e9';
  	 			} else {
  	 				route_nm_color = '#44516A';
  	 			}
  	 		
  	 			return {
  	 				stroke: {
  	 					color: route_nm_color,
  	 					width: 4
  	 				},
  	 				radius: 10,
  	 				label: {
  	 					//column: 'route_nm'
  	 				}
  	 			}
            	
            });
             
		});
		
		
	}
	
	//버스노선 맵에서 제거
	function offMapBusRoteInfo(){
		//console.log("offMapBusRoteInfo()");
		
		var busRouteIds = TRANSVUNLER.BUSROUTEIDARRAY;
		
		if(busRouteIds){
			for(var i=0; i<busRouteIds.length; i++){
				//console.log(busRouteIds[i]);
				dtmap.vector.removeFeatureById(busRouteIds[i]);
			}
		}else{
			console.log("지도에 데이터 없음");
			return false;
		}

	}
	
	/////////////////
	
	//버스정류장 조회(읍면동) 및 맵 표시
	function onMapBusSttnInfo(emdCd){
		//console.log("onMapBusSttnInfo()");
		//console.log(emdCd);
		
		var options = {
	        typeNames	: 'tgd_bus_sttn_info' + "",
	        sortBy		: 'sttn_id',
	        sortOrder	: 'DESC',
	    };
		
		if(emdCd){
   			//emdCd += "0";
   			let geo = getTrvaEmdGeomData(emdCd);
   			if (geo != null) {
   			    options.geometry = geo;
   			}
   		}
		
		const promise = dtmap.wfsGetFeature(options);
		promise.then(function(data) {
			//console.log(data);
			
			TRANSVUNLER.BUSSTTNIDARRAY = [];
            var features = data.features;
            for(var i=0; i<features.length; i++){
            	TRANSVUNLER.BUSSTTNIDARRAY.push(features[i].id);
            }
           
            //지도에 표시
            dtmap.vector.readGeoJson(data);
           
		});
		
	}

	//버스정류장 맵에서 제거
	function offMapBusSttnInfo(){
		//console.log("offMapBusSttnInfo()");
		
		var busSttnIds = TRANSVUNLER.BUSSTTNIDARRAY;
		
		if(busSttnIds){
			for(var i=0; i<busSttnIds.length; i++){
				//console.log(busSttnIds[i]);
				dtmap.vector.removeFeatureById(busSttnIds[i]);
			}
		}else{
			console.log("지도에 데이터 없음");
			return false;
		}
		
	}

</script>
<!-- 교통분석 - 대중교통 취약분석 -->
	<form name="trvaSearchForm" id="trvaSearchForm" method="post">

	<div class="popup-header">대중교통 취약분석</div>
	<div class="popup-body">
		<div class="left-popup-body">	
			<div class="search-box">
				<div class="srch-default">
					<table class="search-table">
						<colgroup>
							<col style="width: 40%;">
							<col style="width: auto;">
						</colgroup>
						<tbody>
                           <tr>
                              <th scope="row">대상 지역</th>
                               <td>
                                   <select name="searchArea" class="form-select w-auto" style="width: 100%;">
                                       <option value="" selected="selected">전체</option>
                                   </select>
                               </td> 
                           </tr>
                           <tr>
                              <th scope="row">자료 유형</th>
                               <td>
                                   <select name="gender" class="form-select w-auto" style="width: 100%;">
                                       <option value="all" selected="selected">총인구</option>
                                       <option value="m">남자</option>
                                       <option value="w">여자</option>
                                   </select>
                               </td> 
                           </tr>										
                           <tr>
                              <th scope="row">기준 연월</th>
                               <td>
                                   <select name="stdrYm" class="form-select w-auto" style="width: 100%;">
                                   </select>
                               </td> 
                           </tr>										
						</tbody>
					</table>
				</div>
				<div class="btn-wrap">
                    <div>
                        <button type="button" class="btn type01 search" onclick="selectTransVulnerList();">조회</button>
                    </div>
                </div>
				
			</div>
			
			<div>
				<!-- <div class="btn-wrap justify-content-between">
					<div class="bbs-list-num">조회결과 : <strong></strong>건</div>
				</div> -->
		
				<div class="data-default" style="margin-top: 10px;">
					<!-- <div class="bbs-list-head"> -->
	                    <table class="table-title data-list">
	                        <colgroup>
	                            <col style="width: 25%;">
	                            <col style="width: 25%;">
	                            <col style="width: 25%;">
	                            <col style="width: auto;">
	                        </colgroup>
	                        <thead>
		                        <tr>
		                            <th scope="col">지역</th>
		                            <th scope="col">면적비중</th>
		                            <th scope="col">인구비중</th>
		                            <th scope="col">취약지랭킹</th>
		                        </tr>
	                        </thead>
	                    </table>
	                <!-- </div> -->
					<div class="scroll-y" style="max-height: 350px;">
						<table class="bbs-list">
		                     <colgroup>
		                         <col style="width: 25%;">
		                         <col style="width: 25%;">
		                         <col style="width: 25%;">
		                         <col style="width: auto;">
		                     </colgroup>
	                     <tbody id="trvaInfoList">
		                     
	                     <%-- <c:forEach items="${resultList}" var="cpList" varStatus="status">
	                         <tr name="tdCwpDtl" id="tdCwpDtl" data-cpi='<c:out value="${cpList.cntrkPlnId}" />'
	                             data-lon='<c:out value="${cpList.lon}" />'
	                             data-lat='<c:out value="${cpList.lat}" />'>
	                              
	                             <c:forEach items="${codeList}" var="codeList" varStatus="status">
	                                 <c:if test="${cpList.cntrkTy eq codeList.codeId}">
	                                     <td><c:out value="${codeList.codeIdNm}"></c:out></td>
	                                 </c:if>
	                             </c:forEach>
	                             <td><c:out value="${cpList.chpsnPsitn}"></c:out></td>
	                             <td><c:out value="${cpList.plnYear}"></c:out>년 <c:out
	                                     value="${cpList.plnQu}"></c:out></td>
	                             <td><c:out value="${cpList.cntrkNm}"></c:out></td>
	                         </tr>
	                     </c:forEach>
	                     <c:if test="${fn:length(resultList) == 0}">
	                         <tr>
	                             <td colspan="4">데이터가 없습니다.</td>
	                         </tr>
	                     </c:if> --%>
	                     </tbody>
	                 </table>
					</div>
				</div>
				
				<div class="trvaInfoLegend">
					<div style="padding-bottom: 22px">
						<h4 style="float: left;">
							취약 분석<small>(2022년 기준)</small>
						</h4>
						<span class="form-checkbox" style="float: right; margin-left: 10px;">
	                        <input type="checkbox" class="tm tm-chk" id="trva_bus_sttn" name="trva_bus_sttn" >
	                        <label for="trva_bus_sttn">버스정류장</label>
	                    </span>
						<span class="form-checkbox" style="float: right;">
	                        <input type="checkbox" class="tm tm-chk" id="trva_bus_route" name="trva_bus_route" >
	                        <label for="trva_bus_route">버스노선</label>
	                    </span>
					</div>
					<ol>
						<li>
							<span class="rg lv01"></span>
							<label>
								<input type="text" value="0.00" readonly>-
								<input type="text" value="0.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv02"></span>
							<label>
								<input type="text" value="0.00" readonly>-
								<input type="text" value="23.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv03"></span>
							<label>
								<input type="text" value="23.00" readonly>-
								<input type="text" value="77.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv04"></span>
							<label>
								<input type="text" value="77.00" readonly>-
								<input type="text" value="287.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv05"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>
						<!-- Lv 6-10 추가사용 시
						<li>
							<span class="rg lv06"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv07"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv08"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv09"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>
						<li>
							<span class="rg lv10"></span>
							<label>
								<input type="text" value="287.00" readonly>-
								<input type="text" value="1479.00" readonly>
							</label>
						</li>  -->
					</ol>
				</div>
				
			</div>
		</div>
		
	</div>
	
	</form>
	
	<button type="button" class="manualBtn" title="도움말" onclick="manualTab('대중교통취약분석')"></button>
	<button type="button" class="popup-close" id="tranCloseBtn" title="닫기"></button>
	<button type="button" class="popup-reset" class="초기화" id="fcrmResetBtn"></button>
	<button type="button" class="popup-bottom-toggle" title="접기"></button>				
<!-- 교통분석 - 대중교통 취약분석 end -->

